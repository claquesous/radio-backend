require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/streams", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Stream. As you add validations to Stream, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:stream)
  }

  describe "GET /index" do
    it "renders a successful response" do
      create(:stream)
      get streams_url
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Stream", :as_logged_in_user do
        expect {
          post streams_url, params: { stream: valid_attributes }
        }.to change(Stream, :count).by(1)
      end
    end
  end

  describe "PATCH /update" do
    context "without mastodon access token" do
      it "doesn't clear out the token", :as_logged_in_user do
        stream = create(:stream, user: @logged_in_user)
        patch stream_url(stream), params: { stream: { name: "New stream name", mastodon_access_token: ""} }
        stream.reload
        expect(stream.mastodon_access_token).to be_present
      end
    end

    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "NewName"
        }
      }

      it "updates the requested stream", :as_logged_in_user do
        stream = create(:stream, user: @logged_in_user)
        patch stream_url(stream), params: { stream: new_attributes }
        stream.reload
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested stream", :as_logged_in_user do
      stream = create(:stream, user: @logged_in_user)
      expect {
        delete stream_url(stream)
      }.to change(Stream, :count).by(-1)
    end
  end
end
